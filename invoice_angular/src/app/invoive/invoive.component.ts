import { Component } from '@angular/core';
import { InvoiceService } from '../invoice.service';
import { Customer, Items } from '../customer';
import { DatePipe } from '@angular/common';

@Component({
  selector: 'app-invoive',
  templateUrl: './invoive.component.html',
  styleUrls: ['./invoive.component.css'],
})
export class InvoiveComponent {
  constructor(
    private invService: InvoiceService,
    private datepipe: DatePipe
  ) { }
  invoiceDate: any;
  currentQuantity: number = 1;
  currentUnitPrice: number = 0;
  taxRate: number = 0.09;

  //function to generate random invoice number

  generatedRandomInvoiceNumber() {
    const autoGeneratedNumber = Math.floor(Math.random() * 1000);
    this.generatedinvoicenumber = `INV${autoGeneratedNumber}`;
  }

  //on customer selct set name for selectedcustomername
  onCustomerSelect(customerName: string): void {
    this.selectedCustomerName = customerName;
  }

  //to disable button with validation

  isSubmitButtonDisabled(): boolean {
    if (
      !this.selectedCustomerName ||
      this.rows.length === 0 ||
      !this.rows.every(row => row.name && row.currentQuantity >= 1 && row.currentUnitPrice >= 0.01)
    ) {
      return true;
    }

    return false;
  }



  generatedinvoicenumber: string = '';
  customers: Customer[] = [];
  selectedCustomerName: string = '';
  item: Items[] = [];
  selectedItemName: string = '';
  currentDate: Date = new Date();

  rows: any[] = [];

  //to add empty row

  addRow() {
    const newRow = { id: this.rows.length + 1, currentQuantity: 1 };
    this.rows.push(newRow);
  }

  //to delete row

  deleteRow(row: any) {
    const rowIndex = this.rows.indexOf(row);
    if (rowIndex !== -1) {
      this.rows.splice(rowIndex, 1);
    }
  }

  //initial load of data
  ngOnInit(): void {
    const currentDate = new Date();
    // this.invoiceDate = currentDate.toISOString().substr(0, 10);
    this.invoiceDate = this.datepipe.transform(currentDate, 'dd/MM/yyyy');
    this.invService.getAllCustomer().subscribe(
      (customers) => (this.customers = customers),
      (error) => console.error('Error fetching customers:', error)
    );

    this.invService.getAllItem().subscribe(
      (items) => (this.item = items),
      (error) => console.error('Error fetching items:', error)
    );

    setInterval(() => {
    }, 1000);
    this.generatedRandomInvoiceNumber();
    this.currentDate.toISOString().substr(0, 10);
    this.addRow();
  }

  //on item select set default price

  onItemSelect(selectedItemName: string, row: any) {
    const selectedItem = this.item.find(
      (item) => item.name === selectedItemName
    );
    if (selectedItem) {
      this.selectedItemName = selectedItem.name;
      row.currentUnitPrice = selectedItem.itemprice;
    }
  }

  //to add data to the database

  onSubmit(row: any) {
    console.log("REQUESTTTTTT", row)
    const invoiceData = {
      customerName: this.selectedCustomerName,
      invoiceNumber: this.generatedinvoicenumber,
      curDate: this.invoiceDate,
      item: this.rows.map(row => ({
        itemName: row.name,
        quantity: row.currentQuantity,
        price: row.currentUnitPrice,
        subtotal: this.updateTotalAmount(row),
        gstAmount: this.calculateTaxAmount(row),
        totalAmount: this.calculateTotalAmountWithTax(row),
      }))
    };
    console.log("INVOICEEEEEEEEEE", invoiceData);
    this.invService.saveInvoiceData(invoiceData).subscribe(
      response => {
        console.log('Response from server:', response);
      },
      error => {
        console.error('Error saving invoice data', error);
      }
    );
    location.reload();

  }

  //calcualtion for each row
  updateTotalAmount(row: any): number {
    return row.currentQuantity * row.currentUnitPrice;
  }

  calculateTaxAmount(row: any): number {
    return this.updateTotalAmount(row) * this.taxRate;
  }

  calculateTotalAmountWithTax(row: any): number {
    return this.updateTotalAmount(row) + this.calculateTaxAmount(row);
  }

  //overall calculation
  calculateOverallSubtotal(): number {
    return this.rows.reduce((acc, row) => acc + this.updateTotalAmount(row), 0);
  }

  calculateOverallGstAmount(): number {
    return this.rows.reduce((acc, row) => acc + this.calculateTaxAmount(row), 0);
  }

  calculateOverallTotalAmount(): number {
    return this.rows.reduce((acc, row) => acc + this.calculateTotalAmountWithTax(row), 0);
  }

}
